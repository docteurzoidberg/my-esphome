substitutions:
  devicename: "alarmkeypad"
  friendly_name: "Alarm Keypad"

esphome:
  name: $devicename
  build_path: build/$devicename
  platform: ESP32
  board: esp32doit-devkit-v1
  on_boot:
    priority: 1000
    then:
      - lambda: |-
          id(mainobj).set_display1(id(alpha1));
          id(mainobj).set_display2(id(alpha2));
          id(mainobj).set_alarmstatusentity(id(alarmtext));


wifi: !include "common/wifi.yaml"
captive_portal:
logger:
api:
ota:

i2c:
  sda: 21
  scl: 22

spi:
  clk_pin: 33
  miso_pin: 32
  mosi_pin: 17

pn532:
  cs_pin: 16
  update_interval: 1s
  on_tag:
    then:
    - homeassistant.tag_scanned: !lambda 'return x;'

pcf8574:
  - id: 'pcf8574_hub'
    address: 0x38
    pcf8575: False

keypad:
  id: mykeypad
  rows:
    - pin:
        pcf8574: pcf8574_hub
        number: 0
        mode: INPUT
        inverted: False
    - pin:
        pcf8574: pcf8574_hub
        number: 1
        mode: INPUT
        inverted: False
    - pin:
        pcf8574: pcf8574_hub
        number: 2
        mode: INPUT
        inverted: False
    - pin:
        pcf8574: pcf8574_hub
        number: 3
        mode: INPUT
        inverted: False
  columns:
    - pin:
        pcf8574: pcf8574_hub
        number: 4
        mode: INPUT
        inverted: False
    - pin:
        pcf8574: pcf8574_hub
        number: 5
        mode: INPUT
        inverted: False
    - pin:
        pcf8574: pcf8574_hub
        number: 6
        mode: INPUT
        inverted: False
    - pin:
        pcf8574: pcf8574_hub
        number: 7
        mode: INPUT
        inverted: False
  keys: "789D456B123A0DDD"

#custom_component:
#
#  - id: 'mainobj'
#    lambda: |-
#      auto custom_alarmkeypad = new AlarmKeypad();
#      return {custom_alarmkeypad};

alarm_keypad_component:
  id: mainobj

display:
  - platform: ht16k33_alpha
    id: "alpha1"
    address: 0x70
    update_interval : 33ms
    lambda: |-
      id(mainobj).display1_lambdacall(id(text).state);

  - platform: ht16k33_alpha
    id: "alpha2"
    address: 0x71
    update_interval : 33ms
    lambda: |-
      id(mainobj).display2_lambdacall(id(text).state);

light:

  #Keypad adressable rgb backlight leds
  - platform: fastled_clockless
    chipset: WS2812B
    pin: 13
    num_leds: 13
    rgb_order: GRB
    name: "$friendly_name key backlight leds"
    gamma_correct: 0
    color_correct: [70%, 70%, 70%]
    effects:
      - addressable_rainbow:
          name: Rainbow

  #Case inside glow adressable rgb leds
  - platform: fastled_clockless
    chipset: WS2812B
    pin: 19
    num_leds: 8
    rgb_order: GRB
    name: "$friendly_name case glow leds"
    gamma_correct: 0
    color_correct: [50%, 50%, 50%]
    effects:
      - addressable_rainbow:
          name: Rainbow

  #Rfid status addressable rgb led ring
  - platform: fastled_clockless
    chipset: WS2812B
    pin: 18
    num_leds: 8
    rgb_order: GRB
    name: "$friendly_name Rfid ring leds"
    gamma_correct: 0
    color_correct: [50%, 50%, 50%]
    effects:
      - addressable_rainbow:
          name: Rainbow

text_sensor:

    #Input text from keypad
  - platform: keypad
    id: reader
    keypad_id: mykeypad
    max_length: 4
    end_keys: "AB"
    back_keys: "D"
    allowed_keys: "0123456789"
    on_progress:
      #TODO:
      #Set id(text).publish_state(progress) for the display
      then:
        - lambda: !lambda |-
            id(mainobj).keypress();
            if(x!="")
              id(text).publish_state(x);
        - logger.log:
            format: "input progress: '%s'"
            args: [ 'x.c_str()' ]
    on_value:
      #TODO:
      #if alarm status is armed then disarm with code
      #if alarm status is disarmed then arm_home if A pressed with value as code
      #if alarm status is disarmed then arm_away if B pressed with value as code
      then:
        - lambda: !lambda |-
            id(text).publish_state(x);
        - delay: 2s
        - lambda: !lambda |-
            id(text).publish_state("");
        - logger.log:
            format: "input result: '%s'"
            args: [ 'x.c_str()' ]

    #Text set from/to home assistant
  - platform: homeassistant
    name: "$friendly_name text"
    entity_id: input_text.alarm_keypad_text
    id: text

    #Home assistant alarm status
  - platform: homeassistant
    name: "$friendly_name alarm state"
    entity_id: alarm_control_panel.alarme
    id: alarmtext
    on_value:
      then:
        lambda: !lambda |-

          if(x=="armed_home") {
            id(text).publish_state("A-HOME");
          }
          else if(x=="armed_night") {
            id(text).publish_state("A-NIGHT");
          }
          else if(x=="armed_away") {
            id(text).publish_state("ARMED");
          }
          else if(x=="arming") {
            id(text).publish_state("ARMING");
          }
          else if(x=="disarmed") {
            id(text).publish_state("DISARMED");
          }
          else {
            id(text).publish_state(x);
          }

binary_sensor:
  - <<: !include "common/common_binary_sensors.yaml"

switch:
  - <<: !include "common/common_switchs.yaml"

sensor:
  - <<: !include "common/common_sensors.yaml"

    #Brightness set from home assistant
  - platform: homeassistant
    name: "$friendly_name brightness"
    entity_id: input_number.alarm_keypad_brightness
    id: brightness
    on_value:
      then:
        lambda: !lambda |-
          id(alpha1).set_brightness(x);
          id(alpha2).set_brightness(x);