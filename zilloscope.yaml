substitutions:
  devicename: "zilloscope"
  friendly_name: "Zilloscope"

esphome:
  name: $devicename
  build_path: build/$devicename
  platform: ESP32
  board: esp32doit-devkit-v1

  on_boot:
    - priority: 1000
      then:
        - lambda: |-
            fastled_base_fastledlightoutput->get_controller()->setDither(0);
    - priority: -10
      then:
        - switch.turn_on: zilloscope_control_display
    - priority: 0
      then:
        - lambda: |-
            id(zilloscope_main).on_boot();
            id(zilloscope_main).color_line_setup(32,1,4);

  on_shutdown:
    then:
      - lambda: |-
          id(zilloscope_main).on_shutdown();


wifi: !include "common/wifi.yaml"
captive_portal:
logger:

api:
  services:
    - service: notify
      variables:
        type: int
        text: string
      then:
        - lambda: |-
            id(zilloscope_main).service_notify(type,text,10000);
            //id(zilloscope_main).text_scroller_setup(id(font6px),id(zilloscope_main).get_notification_text(),2,1,-1);

ota:

binary_sensor:
  - <<: !include "common/common_binary_sensors.yaml"

switch:
  - <<: !include "common/common_switchs.yaml"
  - platform: template
    id: zilloscope_control_display
    name: "${friendly_name} Control Display"
    turn_on_action:
      - lambda: |-
          id(zilloscope_display).set_enabled(true);
    turn_off_action:
      - lambda: |-
          id(zilloscope_display).set_enabled(false);

sensor:
  - <<: !include "common/common_sensors.yaml"

font:
  - id: tinyfont
    file: "fonts/pixelmix.ttf"
    size: 8
    glyphs: '!"%()+,-_.:*=°?~#0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'
  - id: font6px
    file: "fonts/6px-Normal.ttf"
    size: 8
    glyphs: '!"%()+,-_.:*=°?~#0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'
  - id: font_8bithud
    file: "fonts/8-bit-hud.ttf"
    size: 5
    glyphs: '!"%()+,-_.:*=°?~#0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/Paris

light:
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO5
    num_leds: 256
    rgb_order: GRB
    name: "$friendly_name Matrix"
    id: zilloscope_matrix
    color_correct: [50%, 50%, 50%]
    default_transition_length : 0s
    #gamma_correct: 0
    restore_mode : ALWAYS_ON

animation:
  - file: "img/zillo/zilloscope1.gif"
    id: boot_animation
    type: RGB24
    resize: 32x8

display:
  - platform: addressable_light_display
    id: zilloscope_display
    addressable_light_id: zilloscope_matrix
    width: 32
    height: 8
    update_interval: 16ms
    lambda: |-
      id(zilloscope_main).display_lambdacall(it);
    pixel_mapper: |-
      if (x % 2 == 0) {
        return (x * 8) + y;
      }
      return (x * 8) + (7 - y);

zilloscope:
  id: zilloscope_main
  display_id: zilloscope_display
  font_id: tinyfont
  time_id: homeassistant_time

  render_boot: |-
    id(boot_animation).next_frame();
    id(zilloscope_display).image(0, 0, id(boot_animation));
    return false;

  render_time: |-
    //TODO: use text center
    //TODO: fancier clock display
    it.strftime(2, 0, id(font_8bithud),  Color(0xFFFFFF), ((millis()/1000)%2==0)?"%H:%M":"%H.%M", id(homeassistant_time).now());
    return false;

  render_notification: |-

    if(frame==0){
      id(zilloscope_main).text_scroller_setup(id(font6px),id(zilloscope_main).get_notification_text(),2,1,-1);
    }

    //Rainbow line
    id(zilloscope_main).color_line_draw(0,7);

    //Notification type
    if(frame<((2*1000)/16)) {
      //for first 2 seconds
      it.print(16, 3, id(font_8bithud), Color(0x61d3e3), TextAlign::CENTER, "info");
      return true;
    }

    //Text scroller
    if(frame%5==0) {
      //scroll every 5 frame
      if(id(zilloscope_main).text_scroller_scroll()) {
        id(zilloscope_main).end_notification();
        return false;
      }
    }

    id(zilloscope_main).text_scroller_draw(id(font6px),Color(0xFFFFFF));
    return true;

  render_ota: |-
    //TODO
    it.print(0, 0, id(tinyfont), Color(0x0000FF), "OTA");
    return false;

  render_shutdown: |-
    //TODO
    it.print(0, 0, id(tinyfont), Color(0xFF0000), "STOP");
    return false;